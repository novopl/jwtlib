version: 2

jobs:
  build:
    docker:
      - image: novopl/python:3.8-dev
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}

      - run:
          name: Install dependencies
          command: |
            echo -n 'pip            : ' && which pip
            echo -n 'python         : ' && which python
            echo -n 'python version : ' && python --version
            echo -n 'whoami         : ' && whoami

            echo '== poetry install ========================================'
            poetry config virtualenvs.in-project true
            poetry show -v
            poetry install -n --no-ansi
            echo '=========================================================='

      - run:
          name: Check
          command: poetry run peltak check

      - run:
          name: Test
          command: poetry run peltak test --junit

      - save_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}
          paths:
            - /usr/local/bin
            - /usr/local/lib/python3.6/site-packages
            - .venv
            - .mypy_cache
            - .pytest_cache

      - run:
          name: Build Documentation
          command: |
            poetry run peltak docs --recreate --run-doctests
            mv docs/html docs/jwtlib-docs
            cd docs && zip -r ../.build/jwtlib-docs.zip jwtlib-docs

      - store_test_results:
          path: .build/test-results
      - store_artifacts:
          path: .build/coverage/
          destination: coverage
      - store_artifacts:
          path: .build/jwtlib-docs.zip
          destination: jwtlib-docs.zip

  release-tag:
    docker:
      - image: novopl/python:3.8-dev
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}

      - run:
          name: Setup peltak
          command: poetry install -n --no-ansi

      - run:
          name: Upload to pypi
          command: poetry publish -n --build --username="$PYPI_USER" --password="$PYPI_PASS"

      - run:
          name: Create release
          command: poetry run peltak ci publish-release


workflows:
  version: 2

  release:
    jobs:
      - build:
          filters: &release-filters
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - release-tag:
          requires:
            - build
          filters:
            <<: *release-filters

  dev:
    jobs:
      - build:
          filters: &dev-filters
            branches:
              ignore: [gh-pages]
            tags:
              ignore: /^v.*/
