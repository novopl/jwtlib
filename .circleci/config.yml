version: 2

jobs:
  build:
    docker:
      - image: novopl/python36:ci-alpine
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}

      - run:
          name: Install dependencies
          command: |
            echo '== which pip ============================================='
            which pip
            echo '== which python =========================================='
            which python
            echo '== python --version ======================================'
            python --version
            echo '== whoami ================================================'
            whoami
            echo '== poetry install ========================================'
            poetry config virtualenvs.in-project true
            poetry show -v
            poetry install -n --no-ansi
            echo '=========================================================='

      - run:
          name: Check
          command: poetry run peltak check

      - run:
          name: Test
          command: poetry run peltak test

      - save_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}
          paths:
            - /usr/local/bin
            - /usr/local/lib/python3.6/site-packages
            - .venv
            - .mypy_cache
            - .pytest_cache

      - run:
          name: Build Documentation
          command: |
            pipenv run peltak docs --recreate --run-doctests
            mv docs/html docs/jwtlib-docs
            cd docs && zip -r ../.build/jwtlib-docs.zip jwtlib-docs

      - store_test_results:
          path: .build
      - store_artifacts:
          path: .build/coverage/
          destination: coverage
      - store_artifacts:
          path: .build/jwtlib-docs.zip
          destination: jwtlib-docs.zip

  release:
    docker:
      - image: novopl/python36:ci-alpine
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}}

      - run:
          name: Install dependencies
          command: poetry install -n --no-ansi

      - run:
          name: Upload to pypi
          command: |
            poetry run peltak pypi configure
            poetry run peltak pypi upload
            rm ~/.pypirc

      - run:
          name: Create release tag
          command: |
            poetry run peltak release tag -m "$(potery run peltak changelog)"
            git push origin v$(poetry run peltak version --porcelain)

# docs:
#   docker:
#     - image: novopl/python36:ci-alpine
#   steps:
#     - checkout
#     - restore_cache:
#         key: deps-rev1-{{ checksum "setup.py" }}

#     - run:
#         name: Setup
#         command: |
#           pip install .
#           peltak --help

#     - run:
#         name: Deploy gh-pages
#         command: |
#           peltak docs
#           git checkout gh-pages
#           cp -r docs/html/* ./
#           git add .
#           git config user.email ${GIT_EMAIL}
#           git config user.name ${GIT_USER}
#           git commit -nm "Docs build #${CIRCLECI_BUILD_NUM}"
#           git push --no-verify origin gh-pages


workflows:
  version: 2
  main:
    jobs:
      - build:
          filters:
            branches:
              ignore: [gh-pages]
      - release:
          requires:
            - build
          filters:
            branches:
              only: master
              ignore: [gh-pages]
#     - docs:
#         requires:
#           - build
#         filters:
#           branches:
#             only: master
